#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([namespace],[n],[Namespace],[default])
# ARG_OPTIONAL_SINGLE([environment-dns],[d],[Ingress DNS name],[])
# ARG_OPTIONAL_SINGLE([environment-name],[],[Environment name],[onprem])
# ARG_OPTIONAL_SINGLE([eventstore-size],[],[PVC size to use for eventstore],[10Gi])
# ARG_OPTIONAL_SINGLE([format],[o],[Output format (json|yaml)],[json])
# ARG_OPTIONAL_SINGLE([postgres-password],[g],[Postgres password],[])
# ARG_OPTIONAL_SINGLE([postgres-size],[],[PVC size to use for postgres],[10Gi])
# ARG_OPTIONAL_SINGLE([postgres-username],[u],[Postgres username],[])
# ARG_OPTIONAL_SINGLE([pull-secret],[p],[Pull secret],[gcr-json-key])
# ARG_OPTIONAL_SINGLE([smtp-host],[s],[SMTP host],[])
# ARG_OPTIONAL_SINGLE([smtp-port],[r],[SMTP port],[])
# ARG_OPTIONAL_SINGLE([smtp-username],[a],[SMTP username],[])
# ARG_OPTIONAL_SINGLE([smtp-password],[b],[SMTP password],[])
# ARG_OPTIONAL_SINGLE([storage-class],[c],[Storage class],[])
# ARG_OPTIONAL_SINGLE([target],[t],[Type of cluster to generate the resources for (KUBERNETES|OPENSHIFT)],[KUBERNETES])
# ARG_OPTIONAL_SINGLE([uploadserver-size],[],[PVC size to use for uploadserver],[20Gi])
# ARG_OPTIONAL_SINGLE([version],[v],[Version of Polaris],[test])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='ndogupsrabctvh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_namespace="default"
_arg_environment_dns=
_arg_environment_name="onprem"
_arg_eventstore_size="10Gi"
_arg_format="json"
_arg_postgres_password=
_arg_postgres_size="10Gi"
_arg_postgres_username=
_arg_pull_secret="gcr-json-key"
_arg_smtp_host=
_arg_smtp_port=
_arg_smtp_username=
_arg_smtp_password=
_arg_storage_class=
_arg_target="KUBERNETES"
_arg_uploadserver_size="20Gi"
_arg_version="test"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-n|--namespace <arg>] [-d|--environment-dns <arg>] [--environment-name <arg>] [--eventstore-size <arg>] [-o|--format <arg>] [-g|--postgres-password <arg>] [--postgres-size <arg>] [-u|--postgres-username <arg>] [-p|--pull-secret <arg>] [-s|--smtp-host <arg>] [-r|--smtp-port <arg>] [-a|--smtp-username <arg>] [-b|--smtp-password <arg>] [-c|--storage-class <arg>] [-t|--target <arg>] [--uploadserver-size <arg>] [-v|--version <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-n, --namespace: Namespace (default: 'default')"
	printf '\t%s\n' "-d, --environment-dns: Ingress DNS name (no default)"
	printf '\t%s\n' "--environment-name: Environment name (default: 'onprem')"
	printf '\t%s\n' "--eventstore-size: PVC size to use for eventstore (default: '10Gi')"
	printf '\t%s\n' "-o, --format: Output format (json|yaml) (default: 'json')"
	printf '\t%s\n' "-g, --postgres-password: Postgres password (no default)"
	printf '\t%s\n' "--postgres-size: PVC size to use for postgres (default: '10Gi')"
	printf '\t%s\n' "-u, --postgres-username: Postgres username (no default)"
	printf '\t%s\n' "-p, --pull-secret: Pull secret (default: 'gcr-json-key')"
	printf '\t%s\n' "-s, --smtp-host: SMTP host (no default)"
	printf '\t%s\n' "-r, --smtp-port: SMTP port (no default)"
	printf '\t%s\n' "-a, --smtp-username: SMTP username (no default)"
	printf '\t%s\n' "-b, --smtp-password: SMTP password (no default)"
	printf '\t%s\n' "-c, --storage-class: Storage class (no default)"
	printf '\t%s\n' "-t, --target: Type of cluster to generate the resources for (KUBERNETES|OPENSHIFT) (default: 'KUBERNETES')"
	printf '\t%s\n' "--uploadserver-size: PVC size to use for uploadserver (default: '20Gi')"
	printf '\t%s\n' "-v, --version: Version of Polaris (default: 'test')"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --namespace or -n value.
			# so we watch for --namespace and -n.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-n|--namespace)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_namespace="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --namespace=value, so we watch for --namespace=*
			# For whatever we get, we strip '--namespace=' using the ${var##--namespace=} notation
			# to get the argument value
			--namespace=*)
				_arg_namespace="${_key##--namespace=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -n accepts value, we allow it to be appended to it, so we watch for -n*
			# and we strip the leading -n from the argument string using the ${var##-n} notation.
			-n*)
				_arg_namespace="${_key##-n}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-d|--environment-dns)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_environment_dns="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--environment-dns=*)
				_arg_environment_dns="${_key##--environment-dns=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-d*)
				_arg_environment_dns="${_key##-d}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			--environment-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_environment_name="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--environment-name=*)
				_arg_environment_name="${_key##--environment-name=}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			--eventstore-size)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_eventstore_size="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--eventstore-size=*)
				_arg_eventstore_size="${_key##--eventstore-size=}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-o|--format)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_format="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--format=*)
				_arg_format="${_key##--format=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-o*)
				_arg_format="${_key##-o}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-g|--postgres-password)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_postgres_password="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--postgres-password=*)
				_arg_postgres_password="${_key##--postgres-password=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-g*)
				_arg_postgres_password="${_key##-g}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			--postgres-size)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_postgres_size="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--postgres-size=*)
				_arg_postgres_size="${_key##--postgres-size=}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-u|--postgres-username)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_postgres_username="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--postgres-username=*)
				_arg_postgres_username="${_key##--postgres-username=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-u*)
				_arg_postgres_username="${_key##-u}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-p|--pull-secret)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_pull_secret="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--pull-secret=*)
				_arg_pull_secret="${_key##--pull-secret=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-p*)
				_arg_pull_secret="${_key##-p}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-s|--smtp-host)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_smtp_host="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--smtp-host=*)
				_arg_smtp_host="${_key##--smtp-host=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-s*)
				_arg_smtp_host="${_key##-s}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-r|--smtp-port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_smtp_port="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--smtp-port=*)
				_arg_smtp_port="${_key##--smtp-port=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-r*)
				_arg_smtp_port="${_key##-r}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-a|--smtp-username)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_smtp_username="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--smtp-username=*)
				_arg_smtp_username="${_key##--smtp-username=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-a*)
				_arg_smtp_username="${_key##-a}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-b|--smtp-password)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_smtp_password="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--smtp-password=*)
				_arg_smtp_password="${_key##--smtp-password=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-b*)
				_arg_smtp_password="${_key##-b}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-c|--storage-class)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_storage_class="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--storage-class=*)
				_arg_storage_class="${_key##--storage-class=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-c*)
				_arg_storage_class="${_key##-c}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-t|--target)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_target="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--target=*)
				_arg_target="${_key##--target=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-t*)
				_arg_target="${_key##-t}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			--uploadserver-size)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_uploadserver_size="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--uploadserver-size=*)
				_arg_uploadserver_size="${_key##--uploadserver-size=}"
				;;
			# See the comment of option '--namespace' to see what's going on here - principle is the same.
			-v|--version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_version="$2"
				shift
				;;
			# See the comment of option '--namespace=' to see what's going on here - principle is the same.
			--version=*)
				_arg_version="${_key##--version=}"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-v*)
				_arg_version="${_key##-v}"
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])