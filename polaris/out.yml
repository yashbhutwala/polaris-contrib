{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "pericles-swagger-ui",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "pericles-swagger-ui"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 8080,
        "targetPort": 8080
      }
    ],
    "selector": {
      "service": "pericles-swagger-ui"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "configs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "configs-service"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "configs-service"
      }
    },
    "template": {
      "metadata": {
        "name": "configs-service",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "configs-service"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "configs-service",
            "image": "gcr.io/snps-swip-staging/swip_configs-service:1.0.695",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "configs-service"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "configs-service"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-configs-service"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "configs-service",
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "auth-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "auth-server"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "auth-server",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "triage-query",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "triage-query"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "triage-query",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "tools-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-service"
    }
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "cos-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "cos-server"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "cos-server"
      }
    },
    "template": {
      "metadata": {
        "name": "cos-server",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "cos-server"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "cos-server",
            "image": "gcr.io/snps-swip-staging/swip_cos-server:1.6.1865",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "cos-server"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "cos-server"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-cos-server"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore"
              },
              {
                "name": "EVENT_STORE_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_WRITER_USERNAME",
                "value": "writer"
              },
              {
                "name": "EVENT_STORE_WRITER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-writer-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1500Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          },
          {
            "name": "leader-election",
            "image": "k8s.gcr.io/leader-elector:0.5",
            "args": [
              "--election=cos-server",
              "--election-namespace=default",
              "--http=0.0.0.0:4040"
            ],
            "ports": [
              {
                "name": "http",
                "containerPort": 4040,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "50m",
                "memory": "50Mi"
              }
            },
            "imagePullPolicy": "Always"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "cos-server",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "triage-query",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "triage-query"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "triage-query"
      }
    },
    "template": {
      "metadata": {
        "name": "triage-query",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "triage-query"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "triage-query",
            "image": "gcr.io/snps-swip-staging/swip_triage-query:1.6.1865",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "triage-query"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "triage-query"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-triage-query"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore"
              },
              {
                "name": "EVENT_STORE_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_WRITER_USERNAME",
                "value": "writer"
              },
              {
                "name": "EVENT_STORE_WRITER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-writer-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          },
          {
            "name": "leader-election",
            "image": "k8s.gcr.io/leader-elector:0.5",
            "args": [
              "--election=triage-query",
              "--election-namespace=default",
              "--http=0.0.0.0:4040"
            ],
            "ports": [
              {
                "name": "http",
                "containerPort": 4040,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "50m",
                "memory": "50Mi"
              }
            },
            "imagePullPolicy": "Always"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "triage-query",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "web-help",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "web-help"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "web-help"
      }
    },
    "template": {
      "metadata": {
        "name": "web-help",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "web-help"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "web-help",
            "image": "gcr.io/snps-swip-staging/web-help:1.9.108",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "web-help"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "web-help"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "APP_URL"
              },
              {
                "name": "APP_PATH",
                "value": "help"
              },
              {
                "name": "CSRF_TOKEN",
                "value": "csrf_token"
              },
              {
                "name": "ACCESS_TOKEN_EXP_SEC",
                "value": "access_token_exp_sec"
              },
              {
                "name": "LOG_ORIGIN",
                "value": "/api/logs/logging/web-help"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "250m",
                "memory": "100Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "web-help",
        "securityContext": {
          "runAsUser": 100,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "download-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "download-server"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "desktop-metrics-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "desktop-metrics-service"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "issue-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "issue-server"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "taxonomy-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "taxonomy-server"
    }
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "issue-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "issue-server"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "issue-server"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "triage-query",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "triage-query"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "triage-query"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "web-help",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "web-help"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      }
    ],
    "selector": {
      "service": "web-help"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Job",
  "apiVersion": "batch/v1",
  "metadata": {
    "name": "tools-deprecate-job",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-deprecate-job"
    },
    "annotations": {
      "helm.sh/hook": "post-upgrade,post-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "2"
    }
  },
  "spec": {
    "backoffLimit": 0,
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "tools-deprecate-job"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "tools-store-sync",
            "secret": {
              "secretName": "tools-store-sync"
            }
          }
        ],
        "containers": [
          {
            "name": "tools-deprecate-job",
            "image": "gcr.io/snps-swip-staging/swip_tools_sync:1.0.520",
            "env": [
              {
                "name": "MINIO_ACCESS_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-tools-minio",
                    "key": "access_key"
                  }
                }
              },
              {
                "name": "MINIO_SECRET_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-tools-minio",
                    "key": "secret_key"
                  }
                }
              },
              {
                "name": "ENVIRONMENT"
              },
              {
                "name": "OPERATION_TYPE",
                "value": "deprecate"
              },
              {
                "name": "DEPLOYMENT_PLATFORM",
                "value": "on-prem"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "tools-store-sync",
                "mountPath": "/etc/credentials"
              }
            ],
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Never",
        "imagePullSecrets": [
          {}
        ]
      }
    }
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "configs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "configs-service"
    }
  }
}
{
  "kind": "RoleBinding",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "k8s-jobs-manager",
    "namespace": "jay",
    "creationTimestamp": null
  },
  "subjects": [
    {
      "kind": "ServiceAccount",
      "name": "jobs-service",
      "namespace": "jay"
    }
  ],
  "roleRef": {
    "apiGroup": "rbac.authorization.k8s.io",
    "kind": "Role",
    "name": "k8s-jobs-manager"
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "vinyl-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "vinyl-server"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "vinyl-server",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "Job",
  "apiVersion": "batch/v1",
  "metadata": {
    "name": "tools-sync-job",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-sync-job"
    },
    "annotations": {
      "helm.sh/hook": "post-upgrade,post-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "2"
    }
  },
  "spec": {
    "backoffLimit": 0,
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "tools-sync-job"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "tools-store-sync",
            "secret": {
              "secretName": "tools-store-sync"
            }
          },
          {
            "name": "download-server",
            "persistentVolumeClaim": {
              "claimName": "download-server-pv-claim"
            }
          }
        ],
        "containers": [
          {
            "name": "tools-sync-job",
            "image": "gcr.io/snps-swip-staging/swip_tools_sync:1.0.520",
            "env": [
              {
                "name": "MINIO_ACCESS_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-tools-minio",
                    "key": "access_key"
                  }
                }
              },
              {
                "name": "MINIO_SECRET_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-tools-minio",
                    "key": "secret_key"
                  }
                }
              },
              {
                "name": "ENVIRONMENT"
              },
              {
                "name": "OPERATION_TYPE",
                "value": "sync"
              },
              {
                "name": "DEPLOYMENT_PLATFORM",
                "value": "on-prem"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "tools-store-sync",
                "mountPath": "/etc/credentials"
              },
              {
                "name": "download-server",
                "mountPath": "/opt/data"
              }
            ],
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Never",
        "imagePullSecrets": [
          {}
        ]
      }
    }
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "triage-command-handler",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "triage-command-handler"
    }
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "taxonomy-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "taxonomy-server"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "taxonomy-server",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "logs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "logs-service"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "logs-service",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "tds-code-analysis",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tds-code-analysis"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "tds-code-analysis",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "issue-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "issue-server"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "issue-server",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "Role",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "k8s-jobs-manager",
    "namespace": "jay",
    "creationTimestamp": null
  },
  "rules": [
    {
      "verbs": [
        "get",
        "list",
        "watch",
        "create",
        "update",
        "patch",
        "delete"
      ],
      "apiGroups": [
        "batch",
        "extensions"
      ],
      "resources": [
        "jobs"
      ]
    },
    {
      "verbs": [
        "get",
        "list"
      ],
      "apiGroups": [
        ""
      ],
      "resources": [
        "pods",
        "pods/log"
      ]
    }
  ]
}
{
  "kind": "Role",
  "apiVersion": "rbac.authorization.k8s.io/v1beta1",
  "metadata": {
    "name": "leaderElector",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "leaderElector"
    }
  },
  "rules": [
    {
      "verbs": [
        "create",
        "delete",
        "get",
        "patch",
        "update"
      ],
      "apiGroups": [
        "",
        "extensions"
      ],
      "resources": [
        "endpoints"
      ]
    },
    {
      "verbs": [
        "get"
      ],
      "apiGroups": [
        "",
        "extensions"
      ],
      "resources": [
        "namespaces"
      ]
    }
  ]
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "configs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "configs-service"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "configs-service"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "download-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "download-server"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "download-server",
        "protocol": "TCP",
        "port": 9000,
        "targetPort": 9000
      }
    ],
    "selector": {
      "service": "download-server"
    },
    "type": "ClusterIP"
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "issue-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "issue-server"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "issue-server"
      }
    },
    "template": {
      "metadata": {
        "name": "issue-server",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "issue-server"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "issue-server",
            "image": "gcr.io/snps-swip-staging/swip_issue-server:1.6.1865",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "TDS_LOOKUP",
                "value": "10b78709-8156-447e-ac28-8669e461f0c9:code-analysis:Coverity"
              },
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "issue-server"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "issue-server"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-issue-server"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore"
              },
              {
                "name": "EVENT_STORE_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_WRITER_USERNAME",
                "value": "writer"
              },
              {
                "name": "EVENT_STORE_WRITER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-writer-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          },
          {
            "name": "leader-election",
            "image": "k8s.gcr.io/leader-elector:0.5",
            "args": [
              "--election=issue-server",
              "--election-namespace=default",
              "--http=0.0.0.0:4040"
            ],
            "ports": [
              {
                "name": "http",
                "containerPort": 4040,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "50m",
                "memory": "50Mi"
              }
            },
            "imagePullPolicy": "Always"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "issue-server",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "logs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "logs-service"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "logs-service"
      }
    },
    "template": {
      "metadata": {
        "name": "logs-service",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "logs-service"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "logs-service",
            "image": "gcr.io/snps-swip-staging/swip_logs-service:1.5.2347",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "logs-service"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "logs-service"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-logs-service"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "768Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "512Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "logs-service",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "jobs-controller-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "jobs-controller-service"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "tds-code-analysis",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tds-code-analysis"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "tools-deprecate-job",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-deprecate-job"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "auth-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "auth-server"
    }
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "auth-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "auth-server"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "auth-server"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "tds-code-analysis",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tds-code-analysis"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "tds-code-analysis"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "web-core",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "web-core"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "web-core",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "tools-sync-job",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-sync-job"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "jobs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "jobs-service"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "web-help",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "web-help"
    }
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "web-core",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "web-core"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "web-core"
      }
    },
    "template": {
      "metadata": {
        "name": "web-core",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "web-core"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "web-core",
            "image": "gcr.io/snps-swip-staging/web-core:1.7.875",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "web-core"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "web-core"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-web-core"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "APP_URL"
              },
              {
                "name": "API_NAMESPACE",
                "value": "common/v0"
              },
              {
                "name": "API_ORIGIN",
                "value": "/api"
              },
              {
                "name": "AUTH_ORIGIN",
                "value": "/api/auth"
              },
              {
                "name": "CSRF_TOKEN",
                "value": "csrf_token"
              },
              {
                "name": "ACCESS_TOKEN_EXP_SEC",
                "value": "access_token_exp_sec"
              },
              {
                "name": "LOG_ORIGIN",
                "value": "/api/logs/logging/web-core"
              },
              {
                "name": "REPORTING_URL",
                "value": "https:///reporting"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "250m",
                "memory": "100Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "web-core",
        "securityContext": {
          "runAsUser": 100,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "jobs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "jobs-service"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "jobs-service",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "cos-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "cos-server"
    }
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "cos-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "cos-server"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "cos-server"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "logs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "logs-service"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      }
    ],
    "selector": {
      "service": "logs-service"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "jobs-controller-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "jobs-controller-service"
    }
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "service": "jobs-controller-service"
      }
    },
    "template": {
      "metadata": {
        "name": "jobs-controller-service",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "jobs-controller-service"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "jobs-controller-service",
            "image": "gcr.io/snps-swip-staging/swip_jobs-service:1.7.815",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "jobs-controller-service"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "jobs-controller-service"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-jobs-controller-service"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "SWIP_UPLOAD_SERVER_ACCESS_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-upload-server",
                    "key": "access_key"
                  }
                }
              },
              {
                "name": "SWIP_UPLOAD_SERVER_SECRET_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-upload-server",
                    "key": "secret_key"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              },
              {
                "name": "CONFIG",
                "value": "controller-config-k8s.yaml"
              },
              {
                "name": "POSTGRES_DB",
                "value": "jobs-service"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "jobs-controller-service",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "vinyl-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "vinyl-server"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "vinyl-server"
      }
    },
    "template": {
      "metadata": {
        "name": "vinyl-server",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "vinyl-server"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "vinyl-server",
            "image": "gcr.io/snps-swip-staging/swip_vinyl-server:1.6.1865",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "vinyl-server"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "vinyl-server"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-vinyl-server"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "vinyl-server",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "desktop-metrics-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "desktop-metrics-service"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "desktop-metrics-service",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "Ingress",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "swip-ingress",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "swip-ingress"
    },
    "annotations": {
      "ingress.kubernetes.io/hsts": "true",
      "ingress.kubernetes.io/ssl-redirect": "true",
      "kubernetes.io/ingress.class": "nginx",
      "nginx.ingress.kubernetes.io/enable-access-log": "true",
      "nginx.ingress.kubernetes.io/proxy-body-size": "1000m",
      "nginx.ingress.kubernetes.io/rewrite-target": "/$2",
      "nginx.ingress.kubernetes.io/whitelist-source-range": "0.0.0.0/0"
    }
  },
  "spec": {
    "tls": [
      {
        "hosts": [
          ""
        ],
        "secretName": "swip-ingress-tls"
      }
    ],
    "rules": [
      {
        "http": {
          "paths": [
            {
              "path": "/api/auth/v0(/|$)(.*)",
              "backend": {
                "serviceName": "auth-server",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/jobs/v0(/|$)(.*)",
              "backend": {
                "serviceName": "jobs-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/logs/v0(/|$)(.*)",
              "backend": {
                "serviceName": "logs-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/tools/v0(/|$)(.*)",
              "backend": {
                "serviceName": "tools-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/checks/v0(/|$)(.*)",
              "backend": {
                "serviceName": "configs-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/configs/v0(/|$)(.*)",
              "backend": {
                "serviceName": "configs-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api-docs/()(.*)",
              "backend": {
                "serviceName": "pericles-swagger-ui",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/common(/|$)(.*)",
              "backend": {
                "serviceName": "cos-server",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/code-analysis(/|$)(.*)",
              "backend": {
                "serviceName": "tds-code-analysis",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/query(/|$)(.*)",
              "backend": {
                "serviceName": "issue-server",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/issues(/|$)(.*)",
              "backend": {
                "serviceName": "issue-server",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/taxonomy(/|$)(.*)",
              "backend": {
                "serviceName": "taxonomy-server",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/triage-command(/|$)(.*)",
              "backend": {
                "serviceName": "triage-command-handler",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/triage-query(/|$)(.*)",
              "backend": {
                "serviceName": "triage-query",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/auth(/|$)(.*)",
              "backend": {
                "serviceName": "auth-server",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/jobs(/|$)(.*)",
              "backend": {
                "serviceName": "jobs-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/logs(/|$)(.*)",
              "backend": {
                "serviceName": "logs-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/tools(/|$)(.*)",
              "backend": {
                "serviceName": "tools-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/checks(/|$)(.*)",
              "backend": {
                "serviceName": "configs-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/configs(/|$)(.*)",
              "backend": {
                "serviceName": "configs-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/dms(/|$)(.*)",
              "backend": {
                "serviceName": "desktop-metrics-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/api/dms/v0(/|$)(.*)",
              "backend": {
                "serviceName": "desktop-metrics-service",
                "servicePort": 8080
              }
            },
            {
              "path": "/upload(/|$)(.*)",
              "backend": {
                "serviceName": "upload-server",
                "servicePort": 9000
              }
            },
            {
              "path": "/download(/|$)(.*)",
              "backend": {
                "serviceName": "download-server",
                "servicePort": 9000
              }
            },
            {
              "path": "/api/vinyl(/|$)(.*)",
              "backend": {
                "serviceName": "vinyl-server",
                "servicePort": 8080
              }
            },
            {
              "path": "/()(.*)",
              "backend": {
                "serviceName": "web-core",
                "servicePort": 8080
              }
            },
            {
              "path": "/reporting(/|$)(.*)",
              "backend": {
                "serviceName": "rp-frontend",
                "servicePort": 80
              }
            },
            {
              "path": "/reporting/tps(/|$)(.*)",
              "backend": {
                "serviceName": "rp-tools-portfolio-service",
                "servicePort": 60281
              }
            },
            {
              "path": "/reporting/im(/|$)(.*)",
              "backend": {
                "serviceName": "rp-issue-manager",
                "servicePort": 6888
              }
            },
            {
              "path": "/reporting/rpps(/|$)(.*)",
              "backend": {
                "serviceName": "rp-portfolio-service",
                "servicePort": 60289
              }
            },
            {
              "path": "/reporting/rs(/|$)(.*)",
              "backend": {
                "serviceName": "rp-report-service",
                "servicePort": 7979
              }
            },
            {
              "path": "/reporting/swagger(/|$)(.*)",
              "backend": {
                "serviceName": "rp-swagger-doc",
                "servicePort": 8765
              }
            },
            {
              "path": "/reporting/pas(/|$)(.*)",
              "backend": {
                "serviceName": "rp-polaris-agent-service",
                "servicePort": 7788
              }
            },
            {
              "path": "/help(/|$)(.*)",
              "backend": {
                "serviceName": "web-help",
                "servicePort": 8080
              }
            }
          ]
        }
      }
    ]
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "PersistentVolumeClaim",
  "apiVersion": "v1",
  "metadata": {
    "name": "download-server-pv-claim",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "download-server"
    }
  },
  "spec": {
    "accessModes": [
      "ReadWriteOnce"
    ],
    "resources": {
      "requests": {
        "storage": "20Gi"
      }
    }
  },
  "status": {}
}
{
  "kind": "RoleBinding",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "leaderElector",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "leaderElector"
    }
  },
  "subjects": [
    {
      "kind": "ServiceAccount",
      "name": "triage-query",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "triage-command-handler",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-code-analysis",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-fuzz",
      "namespace": "default"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-csv",
      "namespace": "default"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-sca",
      "namespace": "default"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-seeker",
      "namespace": "default"
    },
    {
      "kind": "ServiceAccount",
      "name": "issue-server",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "cos-server",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "auth-server",
      "namespace": "jay"
    }
  ],
  "roleRef": {
    "apiGroup": "rbac.authorization.k8s.io",
    "kind": "Role",
    "name": "leaderElector"
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "auth-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "auth-server"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "auth-server"
      }
    },
    "template": {
      "metadata": {
        "name": "auth-server",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "auth-server"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-server-key",
            "secret": {
              "secretName": "auth-server-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_server_key"
                }
              ]
            }
          },
          {
            "name": "vault-server-cert",
            "secret": {
              "secretName": "auth-server-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_server_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "auth-server",
            "image": "gcr.io/snps-swip-staging/swip_auth-server:1.6.1865",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "auth-server"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "auth-server"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-auth-server"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_WRITER_USERNAME",
                "value": "writer"
              },
              {
                "name": "EVENT_STORE_WRITER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-writer-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_server_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_server_cert"
              },
              {
                "name": "SMTP_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "smtp",
                    "key": "host"
                  }
                }
              },
              {
                "name": "SMTP_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "smtp",
                    "key": "port"
                  }
                }
              },
              {
                "name": "SMTP_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "smtp",
                    "key": "passwd"
                  }
                }
              },
              {
                "name": "SMTP_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "smtp",
                    "key": "username"
                  }
                }
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1500Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-server-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-server-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          },
          {
            "name": "leader-election",
            "image": "k8s.gcr.io/leader-elector:0.5",
            "args": [
              "--election=auth-server",
              "--election-namespace=default",
              "--http=0.0.0.0:4040"
            ],
            "ports": [
              {
                "name": "http",
                "containerPort": 4040,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "50m",
                "memory": "50Mi"
              }
            },
            "imagePullPolicy": "Always"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "auth-server",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "cos-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "cos-server"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "cos-server",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "jobs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "jobs-service"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      }
    ],
    "selector": {
      "service": "jobs-service"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "desktop-metrics-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "desktop-metrics-service"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "desktop-metrics-service"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "vinyl-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "vinyl-server"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "vinyl-server"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "jobs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "jobs-service"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "jobs-service"
      }
    },
    "template": {
      "metadata": {
        "name": "jobs-service",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "jobs-service"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          },
          {
            "name": "coverity-license",
            "secret": {
              "secretName": "coverity-license",
              "items": [
                {
                  "key": "license",
                  "path": "cov_analysis/license.dat"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "jobs-service",
            "image": "gcr.io/snps-swip-staging/swip_jobs-service:1.7.815",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "SWIP_UPLOAD_DESCRIPTOR_EXPIRATION_PERIOD",
                "value": "3h"
              },
              {
                "name": "CLI_FILE_UPLOAD_SIZE_LIMIT",
                "value": "10737418240"
              },
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "jobs-service"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "jobs-service"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-jobs-service"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "SWIP_UPLOAD_SERVER_ACCESS_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-upload-server",
                    "key": "access_key"
                  }
                }
              },
              {
                "name": "SWIP_UPLOAD_SERVER_SECRET_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-upload-server",
                    "key": "secret_key"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              },
              {
                "name": "NOMAD_ADDR",
                "value": "https://nomad:4646"
              },
              {
                "name": "NOMAD_CACERT",
                "value": "/etc/nomad/tls/ca.pem"
              },
              {
                "name": "NOMAD_CLIENT_CERT",
                "value": "/etc/nomad/tls/nomad.pem"
              },
              {
                "name": "NOMAD_CLIENT_KEY",
                "value": "/etc/nomad/tls/nomad-key.pem"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              },
              {
                "name": "INGRESS_NAMESPACE",
                "value": "kube-system"
              },
              {
                "name": "INGRESS_SERVICE",
                "value": "polaris-infra-nginx-internal-ingress-controller"
              },
              {
                "name": "ANALYSIS_TYPE",
                "value": "k8s"
              },
              {
                "name": "CONFIG",
                "value": "config-k8s.yaml"
              },
              {
                "name": "POSTGRES_DB",
                "value": "jobs-service"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1500Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              },
              {
                "name": "coverity-license",
                "readOnly": true,
                "mountPath": "/opt/jobs-server/license"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "jobs-service",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "tools-deprecate-job",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-deprecate-job"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "tools-deprecate-job",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "triage-command-handler",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "triage-command-handler"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "triage-command-handler",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "Job",
  "apiVersion": "batch/v1",
  "metadata": {
    "name": "es-migrator",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "es-migrator"
    },
    "annotations": {
      "helm.sh/hook": "post-install,post-upgrade",
      "helm.sh/hook-delete-policy": "before-hook-creation"
    }
  },
  "spec": {
    "template": {
      "metadata": {
        "name": "es-migrator",
        "creationTimestamp": null
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-server-key",
            "secret": {
              "secretName": "auth-server-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_server_key"
                }
              ]
            }
          },
          {
            "name": "vault-server-cert",
            "secret": {
              "secretName": "auth-server-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_server_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "es-migrator",
            "image": "gcr.io/snps-swip-staging/swip_es-migrator:1.5.840",
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "es-migrator"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "es-migrator"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_server_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_server_cert"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-server-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-server-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "OnFailure",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ]
      }
    }
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "vinyl-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "vinyl-server"
    }
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "web-core",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "web-core"
    }
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "taxonomy-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "taxonomy-server"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "taxonomy-server"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "desktop-metrics-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "desktop-metrics-service"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "desktop-metrics-service"
      }
    },
    "template": {
      "metadata": {
        "name": "desktop-metrics-service",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "desktop-metrics-service"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "desktop-metrics-service",
            "image": "gcr.io/snps-swip-staging/swip_desktop-metrics-service:1.0.309",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "desktop-metrics-service"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "desktop-metrics-service"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8081
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "desktop-metrics-service",
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "download-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "download-server"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "download-server"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "download-server"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "download-server",
            "persistentVolumeClaim": {
              "claimName": "download-server-pv-claim"
            }
          }
        ],
        "initContainers": [
          {
            "name": "bootstrap-download-server",
            "image": "busybox:latest",
            "command": [
              "sh",
              "-c",
              "mkdir -p /opt/data/tools-store-$ENVIRONMENT_NAME"
            ],
            "env": [
              {
                "name": "ENVIRONMENT_NAME"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "download-server",
                "mountPath": "/opt/data"
              }
            ]
          }
        ],
        "containers": [
          {
            "name": "download-server",
            "image": "gcr.io/snps-swip-staging/public/minio/minio:RELEASE.2019-02-14T00-21-45Z",
            "args": [
              "server",
              "/opt/data"
            ],
            "ports": [
              {
                "containerPort": 9000
              }
            ],
            "env": [
              {
                "name": "MINIO_BROWSER",
                "value": "off"
              },
              {
                "name": "MINIO_ACCESS_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-tools-minio",
                    "key": "access_key"
                  }
                }
              },
              {
                "name": "MINIO_SECRET_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-tools-minio",
                    "key": "secret_key"
                  }
                }
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "768Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "512Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "download-server",
                "mountPath": "/opt/data"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {}
        ]
      }
    },
    "strategy": {
      "type": "Recreate"
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "pericles-swagger-ui",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "pericles-swagger-ui"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "pericles-swagger-ui"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "pericles-swagger-ui"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "pericles-swagger-ui",
            "image": "gcr.io/snps-swip-staging/pericles-swagger-ui:0.0.18",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "readinessProbe": {
              "httpGet": {
                "path": "/",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 10
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "pericles-swagger-ui",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "tds-code-analysis",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tds-code-analysis"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "tds-code-analysis"
      }
    },
    "template": {
      "metadata": {
        "name": "tds-code-analysis",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "tds-code-analysis"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "tds-code-analysis-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "tds-code-analysis-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "tds-code-analysis",
            "image": "gcr.io/snps-swip-staging/swip_tds-code-analysis:1.8.77",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "tds-code-analysis"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "tds-code-analysis"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-tds-code-analysis"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore"
              },
              {
                "name": "EVENT_STORE_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_WRITER_USERNAME",
                "value": "writer"
              },
              {
                "name": "EVENT_STORE_WRITER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-writer-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "3Gi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "2Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          },
          {
            "name": "leader-election",
            "image": "k8s.gcr.io/leader-elector:0.5",
            "args": [
              "--election=tds-code-analysis",
              "--election-namespace=default",
              "--http=0.0.0.0:4040"
            ],
            "ports": [
              {
                "name": "http",
                "containerPort": 4040,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "50m",
                "memory": "50Mi"
              }
            },
            "imagePullPolicy": "Always"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "tds-code-analysis",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "tools-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-service"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "tools-service"
      }
    },
    "template": {
      "metadata": {
        "name": "tools-service",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "tools-service"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "tools-service",
            "image": "gcr.io/snps-swip-staging/swip_tools-service:1.5.2428",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "tools-service"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "tools-service"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-tools-service"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "MINIO_ACCESS_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-tools-minio",
                    "key": "access_key"
                  }
                }
              },
              {
                "name": "MINIO_SECRET_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-tools-minio",
                    "key": "secret_key"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "tools-service",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "logs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "logs-service"
    }
  }
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "tools-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-service"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "tools-service",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "triage-command-handler",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "triage-command-handler"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "triage-command-handler"
      }
    },
    "template": {
      "metadata": {
        "name": "triage-command-handler",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "triage-command-handler"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "triage-command-handler",
            "image": "gcr.io/snps-swip-staging/swip_triage-command-handler:1.6.1865",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "triage-command-handler"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "triage-command-handler"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-triage-command-handler"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore"
              },
              {
                "name": "EVENT_STORE_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_WRITER_USERNAME",
                "value": "writer"
              },
              {
                "name": "EVENT_STORE_WRITER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-writer-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              },
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "CLOUDSQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "CLOUDSQL_USERNAME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          },
          {
            "name": "leader-election",
            "image": "k8s.gcr.io/leader-elector:0.5",
            "args": [
              "--election=triage-command-handler",
              "--election-namespace=default",
              "--http=0.0.0.0:4040"
            ],
            "ports": [
              {
                "name": "http",
                "containerPort": 4040,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "50m",
                "memory": "50Mi"
              }
            },
            "imagePullPolicy": "Always"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "triage-command-handler",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "taxonomy-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "taxonomy-server"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "taxonomy-server"
      }
    },
    "template": {
      "metadata": {
        "name": "taxonomy-server",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "taxonomy-server"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-client-key",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_client_key"
                }
              ]
            }
          },
          {
            "name": "vault-client-cert",
            "secret": {
              "secretName": "auth-client-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_client_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "taxonomy-server",
            "image": "gcr.io/snps-swip-staging/swip_taxonomy-server:1.6.1865",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "taxonomy-server"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "taxonomy-server"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-taxonomy-server"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore"
              },
              {
                "name": "EVENT_STORE_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_WRITER_USERNAME",
                "value": "writer"
              },
              {
                "name": "EVENT_STORE_WRITER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-writer-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_client_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_client_cert"
              },
              {
                "name": "APPLICATION_INSIGHTS_IKEY",
                "value": "placeholder"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "1300Mi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-client-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-client-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "taxonomy-server",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "configs-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "configs-service"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "configs-service",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "triage-query",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "triage-query"
    }
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "jobs-controller-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "jobs-controller-service"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      }
    ],
    "selector": {
      "service": "jobs-controller-service"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "tools-service",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "tools-service"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      }
    ],
    "selector": {
      "service": "tools-service"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "triage-command-handler",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "triage-command-handler"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "triage-command-handler"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "web-core",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "web-core"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      }
    ],
    "selector": {
      "service": "web-core"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "pericles-swagger-ui",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "pericles-swagger-ui"
    }
  }
}
{
  "kind": "RoleBinding",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "tools-minio-secret-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "tools-minio-secret-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "1"
    }
  },
  "subjects": [
    {
      "kind": "ServiceAccount",
      "name": "tools-minio-secret-init",
      "namespace": "jay"
    }
  ],
  "roleRef": {
    "apiGroup": "rbac.authorization.k8s.io",
    "kind": "Role",
    "name": "tools-minio-secret-init"
  }
}
{
  "kind": "Deployment",
  "apiVersion": "apps/v1",
  "metadata": {
    "name": "vault-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "vault-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "3"
    }
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "service": "vault-init"
      }
    },
    "template": {
      "metadata": {
        "name": "vault-init",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip-db",
          "chartVersion": "0.0.749",
          "component": "swip-db",
          "componentVersion": "0.0.749",
          "environment": "",
          "service": "vault-init"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-tls-certificate",
            "secret": {
              "secretName": "vault-tls-certificate"
            }
          },
          {
            "name": "vault-policy-configs",
            "configMap": {
              "name": "vault-policies"
            }
          },
          {
            "name": "auth-server-tls-certificate",
            "secret": {
              "secretName": "auth-server-tls-certificate"
            }
          },
          {
            "name": "auth-client-tls-certificate",
            "secret": {
              "secretName": "auth-client-tls-certificate"
            }
          },
          {
            "name": "tds-code-analysis-tls-certificate",
            "secret": {
              "secretName": "tds-code-analysis-tls-certificate"
            }
          }
        ],
        "containers": [
          {
            "name": "vault-init",
            "image": "gcr.io/snps-swip-staging/vault-util:0.1.10",
            "command": [
              "vault-init"
            ],
            "env": [
              {
                "name": "VAULT_ADDR",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/vault/tls/ca.crt"
              },
              {
                "name": "VAULT_INIT_SECRET",
                "value": "vault-init-secret"
              },
              {
                "name": "VAULT_SECRET_ENGINE_VERSION",
                "value": "v2"
              },
              {
                "name": "VAULT_KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "VAULT_POLICY_CONFIGS",
                "value": "/vault/policies"
              },
              {
                "name": "AUTH_SERVER_VAULT_CLIENT_CERTIFICATE",
                "value": "/auth-server-tls-certificate/tls.crt"
              },
              {
                "name": "AUTH_CLIENT_VAULT_CLIENT_CERTIFICATE",
                "value": "/auth-client-tls-certificate/tls.crt"
              },
              {
                "name": "TDS_CODE_ANALYSIS_VAULT_CLIENT_CERTIFICATE",
                "value": "/tds-code-analysis-tls-certificate/tls.crt"
              },
              {
                "name": "KUBERNETES_LABELS",
                "value": "environment: \"\"\nservice: \"vault-init\"\ncomponent: \"swip-db\"\ncomponentVersion: \"0.0.749\"\nchart: \"swip-db\"\nchartVersion: \"0.0.749\""
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "vault-tls-certificate",
                "mountPath": "/vault/tls"
              },
              {
                "name": "auth-server-tls-certificate",
                "mountPath": "/auth-server-tls-certificate"
              },
              {
                "name": "auth-client-tls-certificate",
                "mountPath": "/auth-client-tls-certificate"
              },
              {
                "name": "tds-code-analysis-tls-certificate",
                "mountPath": "/tds-code-analysis-tls-certificate"
              },
              {
                "name": "vault-policy-configs",
                "mountPath": "/vault/policies"
              }
            ],
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "serviceAccount": "vault-init",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ]
      }
    },
    "strategy": {}
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "polaris-db-vault",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "app": "polaris-db-vault",
      "release": "swip-db"
    }
  },
  "spec": {
    "replicas": 1,
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "polaris-db-vault",
          "release": "swip-db"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-config",
            "configMap": {
              "name": "polaris-db-vault-config"
            }
          },
          {
            "name": "vault-root",
            "emptyDir": {}
          },
          {
            "name": "vault-tls-certificate",
            "secret": {
              "secretName": "vault-tls-certificate"
            }
          },
          {
            "name": "vault-init-secret",
            "secret": {
              "secretName": "vault-init-secret"
            }
          }
        ],
        "containers": [
          {
            "name": "vault",
            "image": "vault:0.11.2",
            "command": [
              "vault",
              "server",
              "-config",
              "/vault/config/config.json"
            ],
            "ports": [
              {
                "name": "api",
                "containerPort": 8200
              },
              {
                "name": "cluster-address",
                "containerPort": 8201
              }
            ],
            "env": [
              {
                "name": "POD_IP",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.podIP"
                  }
                }
              },
              {
                "name": "VAULT_CLUSTER_ADDR",
                "value": "https://$(POD_IP):8201"
              },
              {
                "name": "VAULT_LOG_LEVEL",
                "value": "info"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/vault/tls/ca.crt"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "vault-config",
                "mountPath": "/vault/config/"
              },
              {
                "name": "vault-root",
                "mountPath": "/root/"
              },
              {
                "name": "vault-tls-certificate",
                "mountPath": "/vault/tls"
              }
            ],
            "livenessProbe": {
              "tcpSocket": {
                "port": 8200
              }
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/v1/sys/health?standbycode=204\u0026uninitcode=204\u0026",
                "port": 8200,
                "scheme": "HTTPS"
              }
            },
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "add": [
                  "IPC_LOCK"
                ]
              },
              "readOnlyRootFilesystem": true
            }
          },
          {
            "name": "vault-sidecar",
            "image": "gcr.io/snps-swip-staging/vault-util:0.1.10",
            "command": [
              "vault-sidecar",
              "/vault/init"
            ],
            "env": [
              {
                "name": "VAULT_ADDR",
                "value": "https://localhost:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/vault/tls/ca.crt"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "vault-tls-certificate",
                "mountPath": "/vault/tls"
              },
              {
                "name": "vault-init-secret",
                "mountPath": "/vault/init"
              }
            ]
          },
          {
            "name": "vault-exporter",
            "image": "gcr.io/snps-swip-staging/public/grapeshot/vault_exporter:v0.1.2",
            "ports": [
              {
                "name": "cluster-address",
                "containerPort": 9410,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "VAULT_ADDR",
                "value": "https://127.0.0.1:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/vault/tls/ca.crt"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "200m",
                "memory": "384Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-tls-certificate",
                "mountPath": "/vault/tls"
              }
            ],
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "readOnlyRootFilesystem": true,
              "procMount": "Default"
            }
          }
        ],
        "imagePullSecrets": [
          {
            "name": "gcr-json-key"
          }
        ],
        "affinity": {
          "podAntiAffinity": {
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "podAffinityTerm": {
                  "labelSelector": {
                    "matchLabels": {
                      "app": "polaris-db-vault",
                      "release": "swip-db"
                    }
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              }
            ]
          }
        }
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "upload-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "upload-server"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "upload-server"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "chart": "swip-db",
          "chartVersion": "0.0.749",
          "component": "swip-db",
          "componentVersion": "0.0.749",
          "environment": "",
          "service": "upload-server"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "upload-server",
            "persistentVolumeClaim": {
              "claimName": "upload-server-pv-claim"
            }
          }
        ],
        "initContainers": [
          {
            "name": "bootstrap-upload-server",
            "image": "gcr.io/snps-swip-staging/public/busybox:latest",
            "command": [
              "sh",
              "-c",
              "mkdir -p /opt/data/-uploads-bucket"
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "upload-server",
                "mountPath": "/opt/data"
              }
            ]
          }
        ],
        "containers": [
          {
            "name": "upload-server",
            "image": "gcr.io/snps-swip-staging/public/minio/minio:RELEASE.2018-09-25T21-34-43Z",
            "args": [
              "server",
              "/opt/data"
            ],
            "ports": [
              {
                "containerPort": 9000
              }
            ],
            "env": [
              {
                "name": "MINIO_BROWSER",
                "value": "off"
              },
              {
                "name": "MINIO_ACCESS_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-upload-server",
                    "key": "access_key"
                  }
                }
              },
              {
                "name": "MINIO_SECRET_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-upload-server",
                    "key": "secret_key"
                  }
                }
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "upload-server",
                "mountPath": "/opt/data"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {}
        ]
      }
    },
    "strategy": {
      "type": "Recreate"
    }
  },
  "status": {}
}
{
  "kind": "PersistentVolumeClaim",
  "apiVersion": "v1",
  "metadata": {
    "name": "postgresql-pv-claim",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "app": "postgresql"
    }
  },
  "spec": {
    "accessModes": [
      "ReadWriteOnce"
    ],
    "resources": {
      "requests": {
        "storage": "10Gi"
      }
    }
  },
  "status": {}
}
{
  "kind": "Secret",
  "apiVersion": "v1",
  "metadata": {
    "name": "smtp",
    "namespace": "jay",
    "creationTimestamp": null
  },
  "data": {
    "host": "",
    "passwd": "",
    "port": "QUE9PQ==",
    "username": ""
  },
  "type": "Opaque"
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "polaris-db-consul",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "component": "swip-db-consul",
      "release": "swip-db"
    },
    "annotations": {
      "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "port": 8500,
        "targetPort": 0
      },
      {
        "name": "rpc",
        "port": 8400,
        "targetPort": 0
      },
      {
        "name": "serflan-tcp",
        "protocol": "TCP",
        "port": 8301,
        "targetPort": 0
      },
      {
        "name": "serflan-udp",
        "protocol": "UDP",
        "port": 8301,
        "targetPort": 0
      },
      {
        "name": "serfwan-tcp",
        "protocol": "TCP",
        "port": 8302,
        "targetPort": 0
      },
      {
        "name": "serfwan-udp",
        "protocol": "UDP",
        "port": 8302,
        "targetPort": 0
      },
      {
        "name": "server",
        "port": 8300,
        "targetPort": 0
      },
      {
        "name": "consuldns-tcp",
        "port": 8600,
        "targetPort": 0
      },
      {
        "name": "consuldns-udp",
        "protocol": "UDP",
        "port": 8600,
        "targetPort": 0
      }
    ],
    "selector": {
      "component": "swip-db-consul"
    },
    "clusterIP": "None"
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "postgresql",
    "namespace": "jay",
    "creationTimestamp": null
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "postgresql"
      }
    },
    "template": {
      "metadata": {
        "name": "postgresql",
        "creationTimestamp": null,
        "labels": {
          "app": "postgresql"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "postgresdb",
            "persistentVolumeClaim": {
              "claimName": "postgresql-pv-claim"
            }
          }
        ],
        "containers": [
          {
            "name": "postgresql",
            "image": "registry.access.redhat.com/rhscl/postgresql-10-rhel7:1",
            "ports": [
              {
                "containerPort": 5432
              }
            ],
            "envFrom": [
              {
                "configMapRef": {
                  "name": "postgresql-config"
                }
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "postgresdb",
                "mountPath": "/var/lib/postgresql/data",
                "subPath": "postgres"
              }
            ],
            "imagePullPolicy": "IfNotPresent"
          }
        ]
      }
    },
    "strategy": {}
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "upload-server-secret-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "upload-server-secret-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "0"
    }
  }
}
{
  "kind": "Role",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "eventstore-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "eventstore-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "0"
    }
  },
  "rules": [
    {
      "verbs": [
        "get",
        "create",
        "update",
        "patch",
        "delete"
      ],
      "apiGroups": [
        ""
      ],
      "resources": [
        "secrets"
      ]
    }
  ]
}
{
  "kind": "Role",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "tools-minio-secret-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "tools-minio-secret-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "0"
    }
  },
  "rules": [
    {
      "verbs": [
        "get",
        "create",
        "update",
        "patch",
        "delete"
      ],
      "apiGroups": [
        ""
      ],
      "resources": [
        "secrets"
      ]
    }
  ]
}
{
  "kind": "RoleBinding",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "eventstore-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "eventstore-init"
    },
    "annotations": {
      "helm.sh/hook": "post-upgrade,post-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "1"
    }
  },
  "subjects": [
    {
      "kind": "ServiceAccount",
      "name": "eventstore-init",
      "namespace": "jay"
    }
  ],
  "roleRef": {
    "apiGroup": "rbac.authorization.k8s.io",
    "kind": "Role",
    "name": "eventstore-init"
  }
}
{
  "kind": "ConfigMap",
  "apiVersion": "v1",
  "metadata": {
    "name": "vault-policies",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "vault-init"
    }
  },
  "data": {
    "auth-client.hcl": "path \"secret/data/auth/public/*\" {\n  capabilities = [\"list\", \"read\"]\n}\npath \"secret/metadata/auth/*\" {\n  capabilities = [\"list\", \"read\"]\n}",
    "auth-server.hcl": "path \"secret/metadata/auth/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\npath \"secret/destroy/auth/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\npath \"secret/data/auth/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\npath \"secret/delete/auth/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\npath \"secret/undelete/auth/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}",
    "tds-code-analysis.hcl": "path \"secret/data/auth/public/*\" {\n  capabilities = [\"list\", \"read\"]\n}\npath \"secret/data/codeanalysis/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\npath \"secret/metadata/auth/*\" {\n  capabilities = [\"list\", \"read\"]\n}"
  }
}
{
  "kind": "StatefulSet",
  "apiVersion": "apps/v1",
  "metadata": {
    "name": "eventstore",
    "namespace": "jay",
    "creationTimestamp": null
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "component": "eventstore"
      }
    },
    "template": {
      "metadata": {
        "name": "eventstore",
        "creationTimestamp": null,
        "labels": {
          "app": "swip",
          "component": "eventstore"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "eventstore",
            "image": "gcr.io/snps-swip-staging/swip_eventstore:0.0.8",
            "ports": [
              {
                "name": "int-tcp",
                "containerPort": 1112
              },
              {
                "name": "int-http",
                "containerPort": 1113
              },
              {
                "name": "ext-tcp",
                "containerPort": 2112
              },
              {
                "name": "ext-http",
                "containerPort": 2113
              }
            ],
            "env": [
              {
                "name": "EVENTSTORE_CLUSTER_SIZE",
                "value": "3"
              },
              {
                "name": "EVENTSTORE_CLUSTER_DNS",
                "value": "eventstore"
              },
              {
                "name": "EVENTSTORE_GOSSIP_ON_SINGLE_NODE",
                "value": "True"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "data",
                "mountPath": "/var/lib/eventstore"
              }
            ],
            "imagePullPolicy": "Always"
          },
          {
            "name": "eventstore-exporter",
            "image": "gcr.io/snps-swip-staging/public/marcinbudny/eventstore_exporter:0.5.0",
            "ports": [
              {
                "name": "metrics",
                "containerPort": 9448,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "EVENTSTORE_URL",
                "value": "http://127.0.0.1:2113"
              },
              {
                "name": "CLUSTER_MODE",
                "value": "cluster"
              }
            ],
            "resources": {},
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "terminationGracePeriodSeconds": 10,
        "imagePullSecrets": [
          {}
        ]
      }
    },
    "volumeClaimTemplates": [
      {
        "metadata": {
          "name": "data",
          "creationTimestamp": null,
          "labels": {
            "app": "swip",
            "component": "eventstore"
          }
        },
        "spec": {
          "accessModes": [
            "ReadWriteOnce"
          ],
          "resources": {
            "requests": {
              "storage": "10Gi"
            }
          }
        },
        "status": {}
      }
    ],
    "serviceName": "eventstore",
    "updateStrategy": {}
  },
  "status": {
    "replicas": 0
  }
}
{
  "kind": "Pod",
  "apiVersion": "v1",
  "metadata": {
    "name": "swip-db-vault-status-test",
    "namespace": "jay",
    "creationTimestamp": null,
    "annotations": {
      "helm.sh/hook": "test-success"
    }
  },
  "spec": {
    "containers": [
      {
        "name": "swip-db-vault-status-test",
        "image": "vault:0.11.2",
        "command": [
          "sh",
          "-c",
          "vault status"
        ],
        "env": [
          {
            "name": "VAULT_ADDR",
            "value": "http://polaris-db-vault.default:8200"
          }
        ],
        "resources": {}
      }
    ],
    "restartPolicy": "Never"
  },
  "status": {}
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "vault-exporter",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "vault-exporter"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "port": 9410,
        "targetPort": 0
      }
    ],
    "selector": {
      "app": "vault"
    },
    "type": "ClusterIP"
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Job",
  "apiVersion": "batch/v1",
  "metadata": {
    "name": "polaris-init-postgres",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "name": "polaris-init-postgres"
    }
  },
  "spec": {
    "backoffLimit": 4,
    "template": {
      "metadata": {
        "creationTimestamp": null
      },
      "spec": {
        "volumes": [
          {
            "name": "postgres-init",
            "configMap": {
              "name": "polaris-postgres-init-config",
              "defaultMode": 511
            }
          }
        ],
        "containers": [
          {
            "name": "postgres-init",
            "image": "registry.access.redhat.com/rhscl/postgresql-96-rhel7:1",
            "command": [
              "/bin/bash"
            ],
            "args": [
              "-c",
              "sleep 60; /tmp/postgres-init/init.sh"
            ],
            "env": [
              {
                "name": "POSTGRES_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_HOST"
                  }
                }
              },
              {
                "name": "POSTGRES_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PORT"
                  }
                }
              },
              {
                "name": "POSTGRESQL_USER",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_USER"
                  }
                }
              },
              {
                "name": "POSTGRESQL_PASSWORD",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "postgresql-config",
                    "key": "POSTGRESQL_PASSWORD"
                  }
                }
              },
              {
                "name": "POSTGRES_TYPE",
                "value": "${POSTGRES_TYPE}"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "postgres-init",
                "mountPath": "/tmp/postgres-init"
              }
            ]
          }
        ],
        "restartPolicy": "Never"
      }
    }
  },
  "status": {}
}
{
  "kind": "Job",
  "apiVersion": "batch/v1",
  "metadata": {
    "name": "tools-minio-secret-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "tools-minio-secret-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation",
      "helm.sh/hook-weight": "2"
    }
  },
  "spec": {
    "template": {
      "metadata": {
        "name": "tools-minio-secret-init",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip-db",
          "chartVersion": "0.0.749",
          "component": "swip-db",
          "componentVersion": "0.0.749",
          "environment": "",
          "service": "tools-minio-secret-init"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "tools-minio-secret-init",
            "image": "gcr.io/snps-swip-staging/minio-util:0.0.9",
            "command": [
              "minio-init"
            ],
            "env": [
              {
                "name": "MINIO_KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "MINIO_SECRET_NAME",
                "value": "swip-tools-minio"
              },
              {
                "name": "KUBERNETES_LABELS",
                "value": "environment: \"\"\nservice: \"tools-minio-secret-init\"\ncomponent: \"swip-db\"\ncomponentVersion: \"0.0.749\"\nchart: \"swip-db\"\nchartVersion: \"0.0.749\""
              }
            ],
            "resources": {},
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "OnFailure",
        "serviceAccount": "tools-minio-secret-init",
        "imagePullSecrets": [
          {}
        ]
      }
    }
  },
  "status": {}
}
{
  "kind": "Role",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "upload-server-secret-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "upload-server-secret-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "0"
    }
  },
  "rules": [
    {
      "verbs": [
        "get",
        "create",
        "update",
        "patch",
        "delete"
      ],
      "apiGroups": [
        ""
      ],
      "resources": [
        "secrets"
      ]
    }
  ]
}
{
  "kind": "Role",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "vault-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "vault-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "0"
    }
  },
  "rules": [
    {
      "verbs": [
        "get",
        "create",
        "update",
        "patch",
        "delete"
      ],
      "apiGroups": [
        ""
      ],
      "resources": [
        "secrets"
      ]
    }
  ]
}
{
  "kind": "RoleBinding",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "upload-server-secret-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "upload-server-secret-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "1"
    }
  },
  "subjects": [
    {
      "kind": "ServiceAccount",
      "name": "upload-server-secret-init",
      "namespace": "jay"
    }
  ],
  "roleRef": {
    "apiGroup": "rbac.authorization.k8s.io",
    "kind": "Role",
    "name": "upload-server-secret-init"
  }
}
{
  "kind": "RoleBinding",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "vault-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "vault-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "1"
    }
  },
  "subjects": [
    {
      "kind": "ServiceAccount",
      "name": "vault-init",
      "namespace": "jay"
    }
  ],
  "roleRef": {
    "apiGroup": "rbac.authorization.k8s.io",
    "kind": "Role",
    "name": "vault-init"
  }
}
{
  "kind": "Secret",
  "apiVersion": "v1",
  "metadata": {
    "name": "polaris-db-consul-gossip-key",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "component": "swip-db-consul",
      "release": "swip-db"
    }
  },
  "data": {
    "gossip-key": "SXErN2o1QVo0cm1ocXFNbG1OLzFCdz09"
  },
  "type": "Opaque"
}
{
  "kind": "Job",
  "apiVersion": "batch/v1",
  "metadata": {
    "name": "upload-server-secret-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "upload-server-secret-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation",
      "helm.sh/hook-weight": "2"
    }
  },
  "spec": {
    "template": {
      "metadata": {
        "name": "upload-server-secret-init",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip-db",
          "chartVersion": "0.0.749",
          "component": "swip-db",
          "componentVersion": "0.0.749",
          "environment": "",
          "service": "upload-server-secret-init"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "upload-server-secret-init",
            "image": "gcr.io/snps-swip-staging/minio-util:0.0.9",
            "command": [
              "minio-init"
            ],
            "env": [
              {
                "name": "MINIO_KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "MINIO_SECRET_NAME",
                "value": "swip-upload-server"
              },
              {
                "name": "KUBERNETES_LABELS",
                "value": "environment: \"\"\nservice: \"upload-server-secret-init\"\ncomponent: \"swip-db\"\ncomponentVersion: \"0.0.749\"\nchart: \"swip-db\"\nchartVersion: \"0.0.749\""
              }
            ],
            "resources": {},
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "OnFailure",
        "serviceAccount": "upload-server-secret-init",
        "imagePullSecrets": [
          {}
        ]
      }
    }
  },
  "status": {}
}
{
  "kind": "Job",
  "apiVersion": "batch/v1",
  "metadata": {
    "name": "vault-tls-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "vault-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation",
      "helm.sh/hook-weight": "2"
    }
  },
  "spec": {
    "template": {
      "metadata": {
        "name": "vault-tls-init",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip-db",
          "chartVersion": "0.0.749",
          "component": "swip-db",
          "componentVersion": "0.0.749",
          "environment": "",
          "service": "vault-init"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "vault-tls-init",
            "image": "gcr.io/snps-swip-staging/vault-util:0.1.10",
            "command": [
              "vault-tls-init"
            ],
            "env": [
              {
                "name": "VAULT_SERVICE_NAME",
                "value": "polaris-db-vault"
              },
              {
                "name": "VAULT_KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "VAULT_CLIENT_CERTIFICATES",
                "value": "auth-server,auth-client,tds-code-analysis"
              },
              {
                "name": "KUBERNETES_LABELS",
                "value": "environment: \"\"\nservice: \"vault-init\"\ncomponent: \"swip-db\"\ncomponentVersion: \"0.0.749\"\nchart: \"swip-db\"\nchartVersion: \"0.0.749\""
              }
            ],
            "resources": {},
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "OnFailure",
        "serviceAccount": "vault-init",
        "imagePullSecrets": [
          {}
        ]
      }
    }
  },
  "status": {}
}
{
  "kind": "PersistentVolumeClaim",
  "apiVersion": "v1",
  "metadata": {
    "name": "upload-server-pv-claim",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "upload-server"
    }
  },
  "spec": {
    "accessModes": [
      "ReadWriteOnce"
    ],
    "resources": {
      "requests": {
        "storage": "20Gi"
      }
    }
  },
  "status": {}
}
{
  "kind": "ConfigMap",
  "apiVersion": "v1",
  "metadata": {
    "name": "polaris-db-vault-config",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "app": "polaris-db-vault",
      "release": "swip-db"
    }
  },
  "data": {
    "config.json": "{\"listener\":{\"tcp\":{\"address\":\"[::]:8200\",\"cluster_address\":\"[::]:8201\",\"tls_cert_file\":\"/vault/tls/tls.crt\",\"tls_cipher_suites\":\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA\",\"tls_disable\":false,\"tls_key_file\":\"/vault/tls/tls.key\",\"tls_prefer_server_cipher_suites\":true}},\"storage\":{\"consul\":{\"address\":\"polaris-db-consul:8500\",\"path\":\"vault\"}},\"ui\":true}\n"
  }
}
{
  "kind": "StatefulSet",
  "apiVersion": "apps/v1beta1",
  "metadata": {
    "name": "polaris-db-consul",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "component": "swip-db-consul",
      "release": "swip-db"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "component": "swip-db-consul",
        "release": "swip-db"
      }
    },
    "template": {
      "metadata": {
        "name": "polaris-db-consul",
        "creationTimestamp": null,
        "labels": {
          "chart": "consul-3.4.2",
          "component": "swip-db-consul",
          "heritage": "Tiller",
          "release": "swip-db"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "gossip-key",
            "secret": {
              "secretName": "polaris-db-consul-gossip-key"
            }
          }
        ],
        "containers": [
          {
            "name": "polaris-db-consul",
            "image": "consul:1.0.0",
            "command": [
              "/bin/sh",
              "-ec",
              "IP=$(hostname -i)\nif [ -e /etc/consul/secrets/gossip-key ]; then\n  echo \"{\\\"encrypt\\\": \\\"$(base64 /etc/consul/secrets/gossip-key)\\\"}\" \u003e /etc/consul/encrypt.json\n  GOSSIP_KEY=\"-config-file /etc/consul/encrypt.json\"\nfi\n\nfor i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do\n    while true; do\n        echo \"Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME} to come up\"\n        ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc \u003e /dev/null \u0026\u0026 break\n        sleep 1s\n    done\ndone\n\nPEERS=\"\"\nfor i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do\n  NEXT_PEER=\"$(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc | awk -F'[()]' '/PING/{print $2}')\"\n  if [ \"${NEXT_PEER}\" != \"${POD_IP}\" ]; then\n    PEERS=\"${PEERS}${PEERS:+ } -retry-join ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc\"\n  fi\ndone\n\nexec /bin/consul agent \\\n  -ui \\\n  -domain=consul \\\n  -data-dir=/var/lib/consul \\\n  -server \\\n  -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \\\n  -disable-keyring-file \\\n  -bind=0.0.0.0 \\\n  -advertise=${IP} \\\n  ${PEERS} \\\n  ${GOSSIP_KEY} \\\n  -client=0.0.0.0 \\\n  -dns-port=${DNSPORT} \\\n  -http-port=8500\n"
            ],
            "ports": [
              {
                "name": "http",
                "containerPort": 8500
              },
              {
                "name": "rpc",
                "containerPort": 8400
              },
              {
                "name": "serflan-tcp",
                "containerPort": 8301,
                "protocol": "TCP"
              },
              {
                "name": "serflan-udp",
                "containerPort": 8301,
                "protocol": "UDP"
              },
              {
                "name": "serfwan-tcp",
                "containerPort": 8302,
                "protocol": "TCP"
              },
              {
                "name": "serfwan-udp",
                "containerPort": 8302,
                "protocol": "UDP"
              },
              {
                "name": "server",
                "containerPort": 8300
              },
              {
                "name": "consuldns-tcp",
                "containerPort": 8600
              },
              {
                "name": "consuldns-udp",
                "containerPort": 8600,
                "protocol": "UDP"
              }
            ],
            "env": [
              {
                "name": "INITIAL_CLUSTER_SIZE",
                "value": "1"
              },
              {
                "name": "STATEFULSET_NAME",
                "value": "polaris-db-consul"
              },
              {
                "name": "POD_IP",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.podIP"
                  }
                }
              },
              {
                "name": "STATEFULSET_NAMESPACE",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.namespace"
                  }
                }
              },
              {
                "name": "DNSPORT",
                "value": "8600"
              }
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "datadir",
                "mountPath": "/var/lib/consul"
              },
              {
                "name": "gossip-key",
                "readOnly": true,
                "mountPath": "/etc/consul/secrets"
              }
            ],
            "livenessProbe": {
              "exec": {
                "command": [
                  "consul",
                  "members"
                ]
              },
              "initialDelaySeconds": 300,
              "timeoutSeconds": 5
            },
            "imagePullPolicy": "Always"
          }
        ],
        "securityContext": {
          "fsGroup": 1000
        },
        "affinity": {
          "podAntiAffinity": {
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 1,
                "podAffinityTerm": {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "component",
                        "operator": "In",
                        "values": [
                          "swip-db-consul"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              }
            ]
          }
        }
      }
    },
    "volumeClaimTemplates": [
      {
        "metadata": {
          "name": "datadir",
          "creationTimestamp": null
        },
        "spec": {
          "accessModes": [
            "ReadWriteOnce"
          ],
          "resources": {
            "requests": {
              "storage": "1Gi"
            }
          }
        },
        "status": {}
      }
    ],
    "serviceName": "polaris-db-consul",
    "updateStrategy": {
      "type": "RollingUpdate"
    }
  },
  "status": {
    "replicas": 0
  }
}
{
  "kind": "Pod",
  "apiVersion": "v1",
  "metadata": {
    "name": "swip-db-ui-test-3gfbs",
    "namespace": "jay",
    "creationTimestamp": null,
    "annotations": {
      "helm.sh/hook": "test-success"
    }
  },
  "spec": {
    "volumes": [
      {
        "name": "tests",
        "configMap": {
          "name": "polaris-db-consul-tests"
        }
      },
      {
        "name": "tools",
        "emptyDir": {}
      }
    ],
    "initContainers": [
      {
        "name": "test-framework",
        "image": "dduportal/bats:0.4.0",
        "command": [
          "bash",
          "-c",
          "set -ex\n# copy bats to tools dir\ncp -R /usr/local/libexec/ /tools/bats/\n"
        ],
        "resources": {},
        "volumeMounts": [
          {
            "name": "tools",
            "mountPath": "/tools"
          }
        ]
      }
    ],
    "containers": [
      {
        "name": "swip-db-ui-test",
        "image": "lachlanevenson/k8s-kubectl:v1.4.8-bash",
        "command": [
          "/tools/bats/bats",
          "-t",
          "/tests/run.sh"
        ],
        "resources": {},
        "volumeMounts": [
          {
            "name": "tests",
            "readOnly": true,
            "mountPath": "/tests"
          },
          {
            "name": "tools",
            "mountPath": "/tools"
          }
        ]
      }
    ],
    "restartPolicy": "Never"
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "tools-minio-secret-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "tools-minio-secret-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "0"
    }
  }
}
{
  "kind": "ConfigMap",
  "apiVersion": "v1",
  "metadata": {
    "name": "polaris-db-consul-tests",
    "namespace": "jay",
    "creationTimestamp": null
  },
  "data": {
    "run.sh": "@test \"Testing Consul cluster has quorum\" {\n  for i in {0..2}; do\n    for n in {1..30}; do\n      if [ `kubectl exec polaris-db-consul-$i consul members --namespace=default | grep server | wc -l` -ge \"3\" ]; then\n        echo \"polaris-db-consul-$i OK. consul members returning at least 3 records.\"\n        break\n      else\n        echo \"polaris-db-consul-$i ERROR. consul members returning less than 3 records.\"\n      fi\n\n      if [ \"$n\" -ge \"30\" ]; then\n        echo \"Failed $n times to get members from polaris-db-consul-$i\"\n        exit 1\n      fi\n      sleep 10\n    done\n  done\n}"
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "mongodb",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "mongodb"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "mongodb",
        "protocol": "TCP",
        "port": 27017,
        "targetPort": 0
      }
    ],
    "selector": {
      "service": "mongodb"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "PodDisruptionBudget",
  "apiVersion": "policy/v1beta1",
  "metadata": {
    "name": "polaris-db-consul-pdb",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "component": "swip-db-consul",
      "release": "swip-db"
    }
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "component": "swip-db-consul"
      }
    },
    "maxUnavailable": 1
  },
  "status": {
    "disruptionsAllowed": 0,
    "currentHealthy": 0,
    "desiredHealthy": 0,
    "expectedPods": 0
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "eventstore-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "eventstore-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "0"
    }
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "postgresql",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "app": "postgresql"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "postgresql",
        "protocol": "TCP",
        "port": 5432,
        "targetPort": 5432
      }
    ],
    "selector": {
      "app": "postgresql"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "upload-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "upload-server"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "upload-server",
        "protocol": "TCP",
        "port": 9000,
        "targetPort": 9000
      }
    ],
    "selector": {
      "service": "upload-server"
    },
    "type": "ClusterIP"
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "PodDisruptionBudget",
  "apiVersion": "policy/v1beta1",
  "metadata": {
    "name": "polaris-db-vault",
    "namespace": "jay",
    "creationTimestamp": null
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "app": "polaris-db-vault",
        "release": "swip-db"
      }
    },
    "maxUnavailable": 1
  },
  "status": {
    "disruptionsAllowed": 0,
    "currentHealthy": 0,
    "desiredHealthy": 0,
    "expectedPods": 0
  }
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "vault-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "vault-init"
    },
    "annotations": {
      "helm.sh/hook": "pre-upgrade,pre-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "0"
    }
  }
}
{
  "kind": "ConfigMap",
  "apiVersion": "v1",
  "metadata": {
    "name": "polaris-postgres-init-config",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "name": "polaris-postgres-init-config"
    }
  },
  "data": {
    "init.sh": "#!/bin/bash\nset -e\nif [[ -z \"$POSTGRES_HOST\" ]]; then\n  echo \"POSTGRES_HOST must be set\"\n  exit 1\nfi\n\nif [[ \"$POSTGRES_TYPE\" == \"internal\" ]];then\n  PGPASSWORD=${POSTGRESQL_PASSWORD} psql -h $POSTGRES_HOST -U postgres \u003c\u003c EOF\n  ALTER USER $POSTGRESQL_USER SUPERUSER;\n  #ALTER USER $POSTGRESQL_USER CREATEDB;\n  #ALTER USER $POSTGRESQL_USER CREATEROLE;\nEOF\nfi\n\nif [[ `PGPASSWORD=${POSTGRESQL_PASSWORD} psql -h $POSTGRES_HOST -U $POSTGRESQL_USER -c \"SELECT datname FROM pg_catalog.pg_database WHERE datname='cos';\" -d postgres --tuples-only | wc -l` -eq 1 ]]; then\n  echo \"cos is missing. Initializing the database...\"\n  PGPASSWORD=${POSTGRESQL_PASSWORD} psql -h $POSTGRES_HOST -U $POSTGRESQL_USER -d postgres \u003c\u003c EOF\n  CREATE DATABASE cos;\n  CREATE DATABASE \"jobs-service\";\n  CREATE DATABASE issues;\n  CREATE DATABASE code_analysis;\n  CREATE DATABASE tds_fuzz;\n  CREATE DATABASE configs;\n  CREATE DATABASE triage_query;\n  CREATE DATABASE triage_command;\n  CREATE DATABASE desktop_metrics;\n  CREATE DATABASE tds_csv;\n  CREATE DATABASE tds_seeker;\nEOF\nfi"
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "polaris-db-consul-ui",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "component": "swip-db-consul",
      "release": "swip-db"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "port": 8500,
        "targetPort": 0
      }
    ],
    "selector": {
      "component": "swip-db-consul"
    },
    "type": "NodePort"
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "mongodb",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "mongodb"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "mongodb"
      }
    },
    "template": {
      "metadata": {
        "name": "mongodb",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip-db",
          "chartVersion": "0.0.749",
          "component": "swip-db",
          "componentVersion": "0.0.749",
          "environment": "",
          "service": "mongodb"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "mongodb-data",
            "persistentVolumeClaim": {
              "claimName": "mongodb"
            }
          }
        ],
        "containers": [
          {
            "name": "mongodb",
            "image": "gcr.io/snps-swip-staging/swip_mongodb:0.0.6",
            "ports": [
              {
                "name": "mongodb",
                "containerPort": 27017,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "2500Mi"
              },
              "requests": {
                "cpu": "250m",
                "memory": "2Gi"
              }
            },
            "volumeMounts": [
              {
                "name": "mongodb-data",
                "mountPath": "/data/db/"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "Recreate"
    }
  },
  "status": {}
}
{
  "kind": "PersistentVolumeClaim",
  "apiVersion": "v1",
  "metadata": {
    "name": "mongodb",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "mongodb"
    }
  },
  "spec": {
    "accessModes": [
      "ReadWriteOnce"
    ],
    "resources": {
      "requests": {
        "storage": "20Gi"
      }
    }
  },
  "status": {}
}
{
  "kind": "ConfigMap",
  "apiVersion": "v1",
  "metadata": {
    "name": "postgresql-config",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "app": "postgresql"
    }
  },
  "data": {
    "POSTGRESQL_ADMIN_PASSWORD": "",
    "POSTGRESQL_DATABASE": "",
    "POSTGRESQL_HOST": "",
    "POSTGRESQL_PASSWORD": "",
    "POSTGRESQL_PORT": "5432",
    "POSTGRESQL_USER": ""
  }
}
{
  "kind": "ConfigMap",
  "apiVersion": "v1",
  "metadata": {
    "name": "smtp",
    "namespace": "jay",
    "creationTimestamp": null
  },
  "data": {
    "host": "",
    "port": "2525"
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "eventstore",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "eventstore"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "int-tcp",
        "port": 1112,
        "targetPort": 0
      },
      {
        "name": "int-http",
        "port": 1113,
        "targetPort": 0
      },
      {
        "name": "ext-tcp",
        "port": 2112,
        "targetPort": 0
      },
      {
        "name": "ext-http",
        "port": 2113,
        "targetPort": 0
      },
      {
        "name": "metrics",
        "port": 9448,
        "targetPort": 0
      }
    ],
    "selector": {
      "app": "swip",
      "component": "eventstore"
    },
    "clusterIP": "None",
    "type": "ClusterIP"
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "polaris-db-vault",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "app": "polaris-db-vault",
      "release": "swip-db"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "api",
        "protocol": "TCP",
        "port": 8200,
        "targetPort": 8200
      }
    ],
    "selector": {
      "app": "polaris-db-vault",
      "release": "swip-db"
    },
    "type": "ClusterIP"
  },
  "status": {
    "loadBalancer": {}
  }
}
{
  "kind": "Job",
  "apiVersion": "batch/v1",
  "metadata": {
    "name": "eventstore-init",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.749",
      "component": "swip-db",
      "componentVersion": "0.0.749",
      "environment": "",
      "service": "eventstore-init"
    },
    "annotations": {
      "helm.sh/hook": "post-upgrade,post-install",
      "helm.sh/hook-delete-policy": "before-hook-creation",
      "helm.sh/hook-weight": "2"
    }
  },
  "spec": {
    "template": {
      "metadata": {
        "name": "eventstore-init",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip-db",
          "chartVersion": "0.0.749",
          "component": "swip-db",
          "componentVersion": "0.0.749",
          "environment": "",
          "service": "eventstore-init"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "eventstore-init",
            "image": "gcr.io/snps-swip-staging/eventstore-util:0.0.22",
            "command": [
              "eventstore-init"
            ],
            "env": [
              {
                "name": "EVENTSTORE_KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "EVENTSTORE_SECRET_NAME",
                "value": "swip-eventstore-creds"
              },
              {
                "name": "EVENTSTORE_ADDR",
                "value": "http://eventstore:2113"
              },
              {
                "name": "KUBERNETES_LABELS",
                "value": "environment: \"\"\nservice: \"eventstore-init\"\ncomponent: \"swip-db\"\ncomponentVersion: \"0.0.749\"\nchart: \"swip-db\"\nchartVersion: \"0.0.749\""
              }
            ],
            "resources": {},
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "OnFailure",
        "serviceAccount": "eventstore-init",
        "imagePullSecrets": [
          {}
        ]
      }
    }
  },
  "status": {}
}
{
  "kind": "ServiceAccount",
  "apiVersion": "v1",
  "metadata": {
    "name": "auth-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "auth-server"
    }
  }
}
{
  "kind": "Role",
  "apiVersion": "rbac.authorization.k8s.io/v1beta1",
  "metadata": {
    "name": "leaderElector",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "leaderElector"
    }
  },
  "rules": [
    {
      "verbs": [
        "create",
        "delete",
        "get",
        "patch",
        "update"
      ],
      "apiGroups": [
        "",
        "extensions"
      ],
      "resources": [
        "endpoints"
      ]
    },
    {
      "verbs": [
        "get"
      ],
      "apiGroups": [
        "",
        "extensions"
      ],
      "resources": [
        "namespaces"
      ]
    }
  ]
}
{
  "kind": "RoleBinding",
  "apiVersion": "rbac.authorization.k8s.io/v1",
  "metadata": {
    "name": "leaderElector",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "leaderElector"
    }
  },
  "subjects": [
    {
      "kind": "ServiceAccount",
      "name": "triage-query",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "triage-command-handler",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-code-analysis",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-fuzz",
      "namespace": "default"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-csv",
      "namespace": "default"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-sca",
      "namespace": "default"
    },
    {
      "kind": "ServiceAccount",
      "name": "tds-seeker",
      "namespace": "default"
    },
    {
      "kind": "ServiceAccount",
      "name": "issue-server",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "cos-server",
      "namespace": "jay"
    },
    {
      "kind": "ServiceAccount",
      "name": "auth-server",
      "namespace": "jay"
    }
  ],
  "roleRef": {
    "apiGroup": "rbac.authorization.k8s.io",
    "kind": "Role",
    "name": "leaderElector"
  }
}
{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "auth-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "auth-server"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "service": "auth-server"
      }
    },
    "template": {
      "metadata": {
        "name": "auth-server",
        "creationTimestamp": null,
        "labels": {
          "chart": "swip",
          "chartVersion": "0.0.4868",
          "component": "swip",
          "componentVersion": "0.0.4868",
          "environment": "",
          "service": "auth-server"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "vault-cacert",
            "secret": {
              "secretName": "vault-ca-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_cacrt"
                }
              ]
            }
          },
          {
            "name": "vault-server-key",
            "secret": {
              "secretName": "auth-server-tls-certificate",
              "items": [
                {
                  "key": "tls.key",
                  "path": "vault_server_key"
                }
              ]
            }
          },
          {
            "name": "vault-server-cert",
            "secret": {
              "secretName": "auth-server-tls-certificate",
              "items": [
                {
                  "key": "tls.crt",
                  "path": "vault_server_cert"
                }
              ]
            }
          }
        ],
        "containers": [
          {
            "name": "auth-server",
            "image": "gcr.io/snps-swip-staging/swip_auth-server:1.6.1865",
            "ports": [
              {
                "name": "http",
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "ESJC_LOGGING_LEVEL",
                "value": "INFO"
              },
              {
                "name": "SWIP_ENVIRONMENT_NAME"
              },
              {
                "name": "SWIP_ROOT_DOMAIN"
              },
              {
                "name": "SWIP_SERVICE_NAME",
                "value": "auth-server"
              },
              {
                "name": "NAMESPACE",
                "value": "default"
              },
              {
                "name": "POLARIS_ENVIRONMENT_NAME"
              },
              {
                "name": "POLARIS_ROOT_DOMAIN"
              },
              {
                "name": "POLARIS_SERVICE_NAME",
                "value": "auth-server"
              },
              {
                "name": "KUBERNETES_NAMESPACE",
                "value": "default"
              },
              {
                "name": "JAEGER_SERVICE_NAME",
                "value": "default-auth-server"
              },
              {
                "name": "JAEGER_AGENT_HOST",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "status.hostIP"
                  }
                }
              },
              {
                "name": "JAEGER_AGENT_PORT",
                "value": "6831"
              },
              {
                "name": "JAEGER_REPORTER_LOG_SPANS",
                "value": "false"
              },
              {
                "name": "JAEGER_SAMPLER_TYPE",
                "value": "const"
              },
              {
                "name": "JAEGER_SAMPLER_PARAM",
                "value": "1"
              },
              {
                "name": "MONGODB_HOST",
                "value": "mongodb"
              },
              {
                "name": "MONGODB_PORT",
                "value": "27017"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_ADDR",
                "value": "eventstore.default.svc.cluster.local"
              },
              {
                "name": "EVENT_STORE_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_ADMIN_USERNAME",
                "value": "admin"
              },
              {
                "name": "EVENT_STORE_ADMIN_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-admin-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_WRITER_USERNAME",
                "value": "writer"
              },
              {
                "name": "EVENT_STORE_WRITER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-writer-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "EVENT_STORE_READER_USERNAME",
                "value": "reader"
              },
              {
                "name": "EVENT_STORE_READER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "swip-eventstore-reader-creds",
                    "key": "password"
                  }
                }
              },
              {
                "name": "SWIP_VAULT_ADDRESS",
                "value": "https://polaris-db-vault:8200"
              },
              {
                "name": "VAULT_CACERT",
                "value": "/mnt/vault/ca/vault_cacrt"
              },
              {
                "name": "VAULT_CLIENT_KEY",
                "value": "/mnt/vault/key/vault_server_key"
              },
              {
                "name": "VAULT_CLIENT_CERT",
                "value": "/mnt/vault/cert/vault_server_cert"
              },
              {
                "name": "SMTP_HOST",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "smtp",
                    "key": "host"
                  }
                }
              },
              {
                "name": "SMTP_PORT",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "smtp",
                    "key": "port"
                  }
                }
              },
              {
                "name": "SMTP_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "smtp",
                    "key": "passwd"
                  }
                }
              },
              {
                "name": "SMTP_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "smtp",
                    "key": "username"
                  }
                }
              }
            ],
            "resources": {
              "limits": {
                "cpu": "750m",
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "500m",
                "memory": "1500Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "vault-cacert",
                "readOnly": true,
                "mountPath": "/mnt/vault/ca"
              },
              {
                "name": "vault-server-key",
                "readOnly": true,
                "mountPath": "/mnt/vault/key"
              },
              {
                "name": "vault-server-cert",
                "readOnly": true,
                "mountPath": "/mnt/vault/cert"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/version",
                "port": 8080
              },
              "initialDelaySeconds": 300,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/healthcheck",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 30,
              "failureThreshold": 4
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          },
          {
            "name": "leader-election",
            "image": "k8s.gcr.io/leader-elector:0.5",
            "args": [
              "--election=auth-server",
              "--election-namespace=default",
              "--http=0.0.0.0:4040"
            ],
            "ports": [
              {
                "name": "http",
                "containerPort": 4040,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "50m",
                "memory": "50Mi"
              }
            },
            "imagePullPolicy": "Always"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "serviceAccount": "auth-server",
        "securityContext": {
          "runAsUser": 5000,
          "runAsNonRoot": true
        },
        "imagePullSecrets": [
          {}
        ],
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": 1,
        "maxSurge": 1
      }
    }
  },
  "status": {}
}
{
  "kind": "HorizontalPodAutoscaler",
  "apiVersion": "autoscaling/v2beta1",
  "metadata": {
    "name": "auth-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "auth-server"
    }
  },
  "spec": {
    "scaleTargetRef": {
      "kind": "Deployment",
      "name": "auth-server",
      "apiVersion": "extensions/v1beta1"
    },
    "minReplicas": 1,
    "maxReplicas": 3,
    "metrics": [
      {
        "type": "Resource",
        "resource": {
          "name": "memory",
          "targetAverageUtilization": 75
        }
      },
      {
        "type": "Resource",
        "resource": {
          "name": "cpu",
          "targetAverageUtilization": 75
        }
      }
    ]
  },
  "status": {
    "currentReplicas": 0,
    "desiredReplicas": 0,
    "currentMetrics": null,
    "conditions": null
  }
}
{
  "kind": "Service",
  "apiVersion": "v1",
  "metadata": {
    "name": "auth-server",
    "namespace": "jay",
    "creationTimestamp": null,
    "labels": {
      "chartVersion": "0.0.4868",
      "component": "swip",
      "componentVersion": "0.0.4868",
      "environment": "",
      "service": "auth-server"
    }
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "protocol": "TCP",
        "port": 80,
        "targetPort": 8080
      },
      {
        "name": "admin",
        "port": 8081,
        "targetPort": 8081
      }
    ],
    "selector": {
      "service": "auth-server"
    }
  },
  "status": {
    "loadBalancer": {}
  }
}
